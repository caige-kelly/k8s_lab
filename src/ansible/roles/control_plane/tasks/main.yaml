---
- name: update /etc/hosts
  ansible.builtin.shell:
    cmd: echo "$(hostname -i) k8scp" >> /etc/hosts

- name: copy kubeadm conf over
  ansible.builtin.copy:
    src: artifacts/kubeadm-config.yaml
    dest: /home/ubuntu
    owner: ubuntu
    group: ubuntu
    mode: '0640'

- name: kubeadm init
  ansible.builtin.shell:
    cmd: >
      kubeadm init 
      --config=kubeadm-config.yaml
      --upload-certs |
      tee kubeadm-init.out
  register: kubeadm_output
- debug:
    var: kubeadm_output.stdout_lines

- name: set cluster creds
  ansible.builtin.shell:
    cmd: |
      mkdir -p /home/ubuntu/.kube
      cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      chown ubuntu:ubuntu /home/ubuntu/.kube/config
  register: set_creds

- name: fetch kube config
  ansible.builtin.fetch:
    dest: /root/.kube/
    src: /etc/kubernetes/admin.conf
    flat: true

# - name: download calico
#   ansible.builtin.shell:
#     cmd: >
#       wget https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

# - name: apply calico
#   become: yes
#   become_user: ubuntu
#   ansible.builtin.shell:
#     cmd: kubectl apply -f calico.yaml
#   register: apply_calico
# - debug: 
#     var: apply_calico.stdout_lines

- name: copy aws-cni over
  ansible.builtin.copy:
    src: artifacts/aws-k8s-cni.yaml
    dest: /home/ubuntu
    owner: ubuntu
    group: ubuntu
    mode: '0640'

- name: apply aws-cni
  become: yes
  become_user: ubuntu
  ansible.builtin.shell:
    cmd: kubectl apply -f aws-k8s-cni.yaml

- name: fix crictl
  ansible.builtin.shell:
    cmd: |
      cat << EOF | tee /etc/crictl.yaml
      runtime-endpoint: unix:///var/run/containerd/containerd.sock
      image-endpoint: unix:///var/run/containerd/containerd.sock
      timeout: 10
      EOF

- name: configure bash complete
  ansible.builtin.shell:
    cmd: |
      apt-get install bash-completion -y
      echo "source <(kubectl completion bash)" >> /home/ubuntu/.bashrc

- name: export IP for worker nodes
  ansible.builtin.shell:
    cmd: echo "$(hostname -i | awk '{print $1}') k8scp"
  register: ip_raw

- name: extract join command
  ansible.builtin.shell:
    cmd: >
      cat kubeadm-init.out
      | grep -A4 "any number of worker nodes"
      | tail -n 2
      | tr -d '\n'
      | tr -d '\t'
      | tr -d '\'
  register: join

- debug: 
    var: ip_raw.stdout
- debug:
    var: join.stdout 

- name: dummy host with ip
  add_host:
    name: "DUMMY_HOST"
    IP: "{{ ip_raw.stdout }}"
    JOIN: "{{ join.stdout}} "